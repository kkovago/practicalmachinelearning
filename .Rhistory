q()
?str
?readJPEG
??readJPEG
packageVersion("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
1/52
4/52
52
1/52
4/52
0
12/52
3/51
2/51
swirl()
1.28
.64
64%
.64
mypdf()
mypdf(1)
mypdf
mypdf(.6)
mypdf(1.6)
integrate(mypdf,0,1.6)
sqrt(2)
.997*.001
(1-.985)*.999
.997*.001/(.997*.001+(1-.985)*.999)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smean)
mean(smeans)
View(dat)
data(ToothGrowth)
dat <- ToothGrowth
ggplot(dat, aes(x=factor(dose), y=len, fill=factor(dose)))+geom_boxplot()+facet_grid(.~supp)+ggtitle("Analyzing ToothGrowth data")
library(datasets)
data(ToothGrowth)
dat <- ToothGrowth
qplot(supp, len, data=ToothGrowth,
main="Tooth growth by supplement and dosage",
xlab="Supplement", ylab="Tooth length",
facets=~dose) +
geom_boxplot(aes(fill = supp))
library(ggplot2)
library(datasets)
data(ToothGrowth)
dat <- ToothGrowth
qplot(supp, len, data=ToothGrowth,
main="Tooth growth by supplement and dosage",
xlab="Supplement", ylab="Tooth length",
facets=~dose) +
geom_boxplot(aes(fill = supp))
qplot(dose, len, data=ToothGrowth,
main="Tooth growth by supplement and dosage",
xlab="Supplement", ylab="Tooth length",
facets=~supp) +
geom_boxplot(aes(fill = supp))
qplot(supp, len, data=ToothGrowth,
main="Tooth growth by supplement and dosage",
xlab="Supplement", ylab="Tooth length",
facets=~dose) +
geom_boxplot(aes(fill = supp))
t.test(len ~ supp, data = ToothGrowth, paired = FALSE, var.equal = FALSE)
t.test(len ~ supp, data = ToothGrowth, paired = FALSE, var.equal = FALSE)$conf.int
t.test(len ~ supp, data = ToothGrowth, paired = FALSE, var.equal = FALSE)$conf.int[1]
t.test(len ~ supp, data = ToothGrowth, paired = FALSE, var.equal = FALSE)$conf.int[1,2]
t.test(len ~ supp, data = ToothGrowth, paired = FALSE, var.equal = FALSE)$conf.int[2]
r<-t.test(len ~ supp, data = ToothGrowth, paired = FALSE, var.equal = FALSE)
r$conf.int
?round
rm(list=ls())
swirl()
library(swirl)
install_from_swirl("Regression Models")
swirl()
fit<-lm(child ~ parent, data = galton)
sqrt(fit$residuals^2/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-(sum(mu-galton$child))
sTot<-sum((mu-galton$child)^2)
sTot<-sum((galton$child-mu)^2)
sRes<-deviance(fit$residuals)
what
sRes<-deviance(fit)
1-sRes/sTot
sTot-sRes
summary(fit)$r.squared
cor(child ~ parent)
cor(child , parent)
cor(galton$child , galton$parent)
cor(galton$parent , galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
view(trees)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
View(swiss)
all<-lm(Fertility ~ .,swiss)
summary(all)
all<-lm(Fertility ~ Agriculture,swiss)
all<-lm(Fertility ~ .,swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec<-swiss$Examination+swiss$Catholic
efit<-lm(Fertility, . + ec, data=swiss)
efit<-lm(formula=Fertility, . + ec, data=swiss)
efit<-lm(Fertility ~ . + ec, data=swiss)
coef(all)-coef(efit)
all$coefficients-efit$coefficients
setwd("C:/Users/kkova/Google Drive/Education/Ongoing/Data Science/8 - Machine Learning/Assignment")
rm(list=ls())
"hello/"+"world"
a<-"hello/"+"world"
a<-"hello/"&"world"
file.path("C:\Windows","System")
file.path("C:/Windows","System")
paste0("Hello","world")
sourceDirURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/"
trainingFileName <- "pml-training.csv"
testFileName <- "pml-testing.csv"
downloadData <- function(sourceURL, fileName) {
if(!file.exists(fileName))
download.file(paste0(sourceURL, fileName),dest)
}
downloadData(sourceDirURL, trainingFileName)
downloadData <- function(sourceURL, fileName) {
if(!file.exists(fileName))
download.file(paste0(sourceURL, fileName),fileName)
}
downloadData(sourceDirURL, trainingFileName)
downloadData(sourceDirURL, testFileName)
trainingSet <- read.csv(trainingFileName, na.strings=c("NA","#DIV/0!",""))
testSet <- read.csv(testFileName, na.strings=c("NA","#DIV/0!",""))
View(trainingSet)
dim(trainingSet)
dim(testSet)
apply(trainingSet, 2, function(x) sum(is.na(x)) > .9)
?apply
?sapply
apply(trainingSet, 2, function(x) sum(is.na(x)) )
dim(trainingSet)
19216/19622
as.factor(apply(trainingSet, 2, function(x) sum(is.na(x)) ))
columnsWithNA <- apply(trainingSet, 2, function(x) {sum(is.na(x)) > 0} )
columnsWithNA
!columnsWithNA
columnsWithNA <- apply(trainingSet, 2, function(x) {sum(is.na(x)) > 0} )
columnsNoNA <- apply(trainingSet, 2, function(x) {sum(is.na(x)) == 0} )
dim(trainingSet)
trainingSet <- trainingSet[, columnsNoNA]
dim(trainingSet)
?nearZerVar
?nearZeroVar
library("caret")
install.packages("caret")
library("caret")
?nearZeroVar
badColumns <- nearZeroVar(trainingSet, saveMetrics = FALSE)
badColumns
badColumns <- nearZeroVar(trainingSet, saveMetrics = TRUE)
badColumns
